1 sort bitvec 1
2 input 1 reset
3 input 1 io_en
4 state 1 _cycles
5 sort bitvec 2
6 state 5 countReg ; @[Counter.scala 11:25]
7 state 1 out ; @[past.scala 47:23]
8 state 5 out_1 ; @[past.scala 47:23]
; _resetCount.init
9 zero 1
10 state 1 _resetCount
11 init 1 10 9
12 one 1
13 ugte 1 4 12
14 not 1 13
15 not 1 14
16 sort bitvec 3
17 uext 16 6 1
18 one 1
19 uext 16 18 2
20 add 16 17 19 ; @[Counter.scala 14:26]
21 slice 5 20 1 0 ; @[Counter.scala 14:26]
22 ite 5 3 21 6 ; @[Counter.scala 13:15 14:14 11:25]
23 eq 1 6 8 ; @[CounterFormal.scala 8:21]
24 not 1 2 ; @[CounterFormal.scala 8:11]
25 not 1 23 ; @[CounterFormal.scala 8:11]
26 one 1
27 ugte 1 10 26
28 not 1 27 ; @[Counter.scala 17:11]
29 and 1 7 24
30 and 1 29 15
31 implies 1 30 23
32 not 1 31
33 bad 32 ; assert @[CounterFormal.scala 8:11]
34 implies 1 28 2
35 constraint 34 ; _resetActive
; _cycles.next
36 zero 1
37 uext 5 4 1
38 one 1
39 uext 5 38 1
40 add 5 37 39
41 slice 1 40 0 0
42 ite 1 14 41 4
43 ite 1 2 36 42
44 next 1 4 43
; countReg.next
45 zero 5
46 ite 5 2 45 22
47 next 5 6 46
; out.next
48 next 1 7 3
; out_1.next
49 slice 5 20 1 0
50 next 5 8 49
; _resetCount.next
51 uext 5 10 1
52 one 1
53 uext 5 52 1
54 add 5 51 53
55 slice 1 54 0 0
56 ite 1 28 55 10
57 next 1 10 56
